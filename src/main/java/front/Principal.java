/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package front;

import Connection.ConnectionFactory;
import model.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.geom.Line2D;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.SwingUtilities;
/**
 *
 * @author 55119
 */
public class Principal extends javax.swing.JFrame{
    ApplicationFactory app = new ApplicationFactory(); //Aplicação do grafo
    ArrayList<Point> array_points = new ArrayList(); //Armazenando pontos adicionados no mapa
    Color color_activated  = Color.BLUE; //Cor quando a aresta está ativada
    Color color_deactivated  = Color.RED; //Cor quando a aresta está desativada
    int clicks = 0; //Ajuda a adicionar a aresta, sendo o segundo click em um vértice, que vai adicionar a aresta
    int x_old = 0; //Armazenando X do vertice clicado anteriormente
    int y_old=0; //Armazenando Y do vertice clicado anteriormente
    int x_now = 0; //Armazenando X do vertice clicado atualmente
    int y_now = 0; //Armazenando Y do vertice clicado atualmente
    ConnectionFactory conn;
    boolean allow_add_points = false; //permitir adicionar vértice
    Graphics universal_graph; //grafico para desenhos das arestas e vértices
    ArrayList<Line2D.Float> lines = new ArrayList(); 
    
    
    /**
     * Creates new form Principal
     */
    public Principal() throws Exception {
        
        conn = new ConnectionFactory();
        initComponents();
        initComponents2();
        
        Listar.doClick();
    }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelMap = new javax.swing.JPanel();
        Listar = new javax.swing.JButton();
        Title1 = new javax.swing.JLabel();
        Map = new javax.swing.JLabel();
        AdicionarPontos = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        ComboCitys = new javax.swing.JComboBox<>();
        ButtonCancel = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        ButtonAdd = new javax.swing.JButton();
        SuperiorMenu = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu6 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Algoritmo");
        setBackground(new java.awt.Color(127, 127, 127));
        setMinimumSize(new java.awt.Dimension(900, 934));
        setPreferredSize(new java.awt.Dimension(900, 934));
        setResizable(false);
        getContentPane().setLayout(null);

        PanelMap.setBackground(new java.awt.Color(51, 51, 51));
        PanelMap.setLayout(null);

        Listar.setText("Listar conexões");
        Listar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ListarMouseClicked(evt);
            }
        });
        PanelMap.add(Listar);
        Listar.setBounds(760, 10, 130, 25);

        Title1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        Title1.setForeground(new java.awt.Color(255, 255, 255));
        Title1.setText("Mapa Interativo:");
        PanelMap.add(Title1);
        Title1.setBounds(0, 10, 190, 19);

        Map.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/mapa_esse.png"))); // NOI18N
        Map.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Map.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        Map.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                MapMouseMoved(evt);
            }
        });
        Map.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                MapMouseWheelMoved(evt);
            }
        });
        Map.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                MapMouseClicked(evt);
            }
        });
        Map.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                MapKeyPressed(evt);
            }
        });
        PanelMap.add(Map);
        Map.setBounds(0, 40, 900, 1200);

        getContentPane().add(PanelMap);
        PanelMap.setBounds(0, 0, 900, 860);

        AdicionarPontos.setBackground(new java.awt.Color(51, 51, 51));
        AdicionarPontos.setEnabled(false);
        AdicionarPontos.setMinimumSize(new java.awt.Dimension(900, 934));
        AdicionarPontos.setPreferredSize(new java.awt.Dimension(900, 934));
        AdicionarPontos.setLayout(null);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Sigla");
        AdicionarPontos.add(jLabel2);
        jLabel2.setBounds(190, 330, 60, 22);

        ComboCitys.setBackground(new java.awt.Color(51, 51, 51));
        ComboCitys.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        ComboCitys.setForeground(new java.awt.Color(255, 255, 255));
        ComboCitys.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ComboCitysActionPerformed(evt);
            }
        });
        AdicionarPontos.add(ComboCitys);
        ComboCitys.setBounds(190, 280, 510, 40);

        ButtonCancel.setBackground(new java.awt.Color(255, 255, 255));
        ButtonCancel.setText("Cancelar");
        ButtonCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonCancelMouseClicked(evt);
            }
        });
        ButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelActionPerformed(evt);
            }
        });
        AdicionarPontos.add(ButtonCancel);
        ButtonCancel.setBounds(450, 430, 250, 40);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Cidade");
        AdicionarPontos.add(jLabel3);
        jLabel3.setBounds(190, 250, 60, 22);

        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });
        AdicionarPontos.add(jTextField1);
        jTextField1.setBounds(190, 360, 510, 40);

        ButtonAdd.setBackground(new java.awt.Color(255, 255, 255));
        ButtonAdd.setText("Adicionar");
        ButtonAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddActionPerformed(evt);
            }
        });
        AdicionarPontos.add(ButtonAdd);
        ButtonAdd.setBounds(190, 430, 250, 40);

        getContentPane().add(AdicionarPontos);
        AdicionarPontos.setBounds(0, -50, 900, 890);
        AdicionarPontos.setVisible(false);

        SuperiorMenu.setBackground(new java.awt.Color(51, 51, 51));
        SuperiorMenu.setBorder(null);
        SuperiorMenu.setForeground(new java.awt.Color(255, 255, 255));
        SuperiorMenu.setPreferredSize(new java.awt.Dimension(66, 45));

        jMenu5.setBackground(new java.awt.Color(51, 51, 51));
        jMenu5.setForeground(new java.awt.Color(255, 255, 255));
        jMenu5.setText("Pontos");
        jMenu5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jMenu5MouseClicked(evt);
            }
        });

        jMenuItem1.setBackground(new java.awt.Color(51, 51, 51));
        jMenuItem1.setForeground(new java.awt.Color(255, 255, 255));
        jMenuItem1.setText("Adicionar Ponto");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu5.add(jMenuItem1);

        jMenuItem2.setBackground(new java.awt.Color(51, 51, 51));
        jMenuItem2.setForeground(new java.awt.Color(255, 255, 255));
        jMenuItem2.setText("Remover Ponto");
        jMenu5.add(jMenuItem2);

        SuperiorMenu.add(jMenu5);

        jMenu6.setBackground(new java.awt.Color(51, 51, 51));
        jMenu6.setForeground(new java.awt.Color(255, 255, 255));
        jMenu6.setText("Enlaces");
        SuperiorMenu.add(jMenu6);

        setJMenuBar(SuperiorMenu);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initComponents2(){
        //Capturando grafico inicial para conseguir serem feitas as alterações a partir de um segundo grafico
        universal_graph =  Map.getGraphics();
    }
    
    private void initVertices(){
        //Adicionando os vertices ao grafico
        List<Vertice> vertices = app.getTodasCidades();
        for (int i=0; i<vertices.size(); i++) {
          add_point(vertices.get(i));
        }
    }
    
    private void initConections(){
        //Adicionando as arestas ao grafico
        List<Aresta> conexoes = app.getTodasConexoes();
        for (int i=0; i<conexoes.size(); i++) {
            Vertice origem = conexoes.get(i).getOrigem();
            Vertice destino = conexoes.get(i).getDestino();
            add_line_aresta(origem.getCordenadaX(), origem.getCordenadaY(), destino.getCordenadaX(),destino.getCordenadaY());
        }
    }
    
    void add_point(Vertice vertice){
        //Cria objeto point e adiciona na lista de pontos
        Point point = new Point(vertice);
        array_points.add(point);
    }
    
    private void reset_graph(){
        //Irá resetar o grafico, removendo arestas
        universal_graph = Map.getGraphics();
        Map.paint(Map.getGraphics());
    }
    
    private void set_click(){
        //Adiciona um click, contabilizando os clicks em vértices
        this.clicks +=1;
    }
    
    private ArrayList<String> search_city(int x, int y) throws Exception{
        //Realiza os cálculos de longitude e latitude e procura as cidades
        System.out.println(x + "," + y);
        ArrayList<String>  names_city = new ArrayList();
        double latitude = 5.48155495 + (y*-0.04885256);
        double longitude = -74.28821548 + (x*0.04895532);
        try {
            names_city = viewTable(latitude, longitude);
        } catch (SQLException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            System.out.println(ex);
        }

        return names_city;
    }
    
    private void add_line_aresta(int x, int y){
        //Adiciona linha de aresta a partir dos cliques
        if(this.clicks == 1){
            System.out.println("a");
            this.x_old = x;
            this.y_old = y;
        }

        if(this.clicks == 2){
            System.out.println("a2");
            ((Graphics2D)universal_graph).setStroke(new BasicStroke(2));


            Line2D.Float line = new Line2D.Float(this.x_old, this.y_old, x, y);
            this.lines.add(line);
            ((Graphics2D)universal_graph).draw(line);
            this.clicks = 0;
        }
    }
    
    private void add_line_aresta(int x1, int y1, int x2, int y2){
        //Adiciona linha de aresta a partir de coordenadas já conseguidas.
        ((Graphics2D)universal_graph).setColor(color_activated);
        ((Graphics2D)universal_graph).setStroke(new BasicStroke(2));
        
        System.out.println("Desenhando: " + x1 + ","+ y1+","+ x2 +","+ y2);
        Line2D.Float line = new Line2D.Float(x1, y1, x2, y2);
        this.lines.add(line);
        ((Graphics2D)universal_graph).draw(line);
        Map.paintComponents(universal_graph);
    }

    
    private void ButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCancelActionPerformed
        //Adiciona novo ponto ao grafico a partir da entrada do usuário
        //add_point(0,ComboCitys.getSelectedItem().toString(), this.x_now, this.y_now);
        AdicionarPontos.setVisible(false);
        SuperiorMenu.setVisible(true);
        PanelMap.setVisible(true);
    }//GEN-LAST:event_ButtonCancelActionPerformed

    private void ComboCitysActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ComboCitysActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ComboCitysActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void MapKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_MapKeyPressed

    }//GEN-LAST:event_MapKeyPressed

    private void MapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MapMouseClicked
        //Se permitida a inserção de ponto por clique, dará as opções de cidades para adição dos pontos
        if(this.allow_add_points){
            this.x_now=evt.getX();
            this.y_now=evt.getY();
            this.clicks = 0;
            int limite = 0;
            ArrayList<String> names_city = new ArrayList();
            try {
                names_city = search_city(this.x_now, this.y_now);
                //Adicionar_Pontos_1 adc_pontos = ;
                //adc_pontos.setVisible(true);
                //this.setVisible(false);
            } catch (Exception ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            if(names_city.size() > 10){limite = 10;}
            else{limite = names_city.size();}

            ComboCitys.removeAllItems();
            for (int i=0;i<limite;i++){
                ComboCitys.addItem(names_city.get(i));
            }

            AdicionarPontos.setVisible(true);
            SuperiorMenu.setVisible(false);
            PanelMap.setVisible(false);

        }
    }//GEN-LAST:event_MapMouseClicked

    private void MapMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_MapMouseWheelMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_MapMouseWheelMoved

    private void jMenu5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu5MouseClicked
        
    }//GEN-LAST:event_jMenu5MouseClicked

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        //Permitindo o clique para adição de novo ponto
        this.allow_add_points = true;
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void ButtonAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_ButtonAddActionPerformed

    private void ButtonCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonCancelMouseClicked
        //Cancelando operação de adição de novo ponto
        AdicionarPontos.setVisible(false);
        SuperiorMenu.setVisible(true);
        PanelMap.setVisible(true);
    }//GEN-LAST:event_ButtonCancelMouseClicked

    private void ListarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListarMouseClicked
        //Inicializando e mostrando grafo.
        initVertices();
        initConections();
        Listar.setVisible(false);
    }//GEN-LAST:event_ListarMouseClicked

    private void MapMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MapMouseMoved
        // TODO add your handling code here:
    }//GEN-LAST:event_MapMouseMoved

    
    
    public ArrayList<String> viewTable(double latitude , double longitude) throws Exception {
        //Após a identificação da latitude e longitude, recolhe as cidades mais próximas das quais foi clicado.
        ArrayList<String> names_citys_around = new ArrayList();    
    
        double compare = 1.5;
        double latitude_max = latitude + compare;
        double latitude_min = latitude - compare;
        double longitude_max = longitude + compare;
        double longitude_min = longitude - compare;


        double diff_longitude_menor = 100000;
        double diff_latitude_menor = 100000;
        String nome_definitivo = "";

        String query = "select * from municipios WHERE latitude BETWEEN " + latitude_min + " and " + latitude_max + "" + " and " +
                "longitude BETWEEN " + longitude_min + " and " + longitude_max + "";

        ResultSet rs = this.conn.buscar(query);
        while (rs.next()) {
          String nome = rs.getString("nome");
          names_citys_around.add(nome);
        }
        return names_citys_around;
    }
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // create our mysql database connection
        //</editor-fold>

        // create our mysql database connection
        
        
        /* Create and display the form */
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new Principal().setVisible(true);
                    
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    class Point{
        //Classe de pontos, nos diz a respeito do vértice, mas armazenando suas propriedades para que possamos mudar ou excluir durante a vontade do usuário.
        private int coordinates_x = 0;
        private int coordinates_y = 0;
        private String name = "";
        private int id_cidade = 0;
        private javax.swing.JPanel princ; //Painel que armazena o ponto e sua sigla
        private javax.swing.JLabel princ_point; //Label que representa o pontp
        
        Point(Vertice vertice){
            princ = new javax.swing.JPanel();
            princ_point = new javax.swing.JLabel();
            
            int tam_img = 20; //Tamanho da imagem referentes ao ponto
            
            //Armazenando informações principais do vertice
            this.coordinates_x = vertice.getCordenadaX();
            this.coordinates_y = vertice.getCordenadaY();
            this.name = vertice.getNomeCidade();
            this.id_cidade = vertice.getIdCidade();
            
            //Calculando as coordenadas do X, Y do Painel
            int x_locate = (coordinates_x-tam_img); 
            int y_locate = (coordinates_y-tam_img/2)-tam_img;
            
            //Configurando JLabel, que mostra a sigla do ponto
            javax.swing.JLabel label_name = new javax.swing.JLabel();
            label_name.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
            label_name.setForeground(new java.awt.Color(255, 255, 255));
            label_name.setText(vertice.getSigla());
            label_name.setBounds(10, 0, 190, 19);
            label_name.setVisible(true);
            princ.add(label_name);
            
            //Configurando Ponto em si
            princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/activated_point.png")));
            princ_point.setLayout(null);
            princ_point.setBounds(10, 20, tam_img, tam_img);
            princ_point.setVisible(true);
            
            //Configurando Painel principal
            princ.setBounds(x_locate, y_locate, tam_img*2, tam_img*2);
            princ.setVisible(true);
            princ.setOpaque(false);
            princ.setLayout(null);
            
            princ.add(princ_point);
            
            
            //Quando o mouse passa por cima do ponto
            princ_point.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/activated_point_mouseon.png")));
                    princ_point.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                }
            });
            
            //Quando o mouse sai de cima do ponto
            princ_point.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseExited(java.awt.event.MouseEvent evt) {
                    princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/activated_point.png")));
                }
            });
            
            //Quando o mouse é clicado
            princ_point.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                    System.out.println(name);
                    set_click();
                    add_line_aresta(coordinates_x, coordinates_y);
                }
            });
            
            //Quando o mouse é pressionado (clicando ou segurando)
            princ_point.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/mouse_clicking.png")));
                }
            });
            
            //Quando o mouse para de ser pressionado
            princ_point.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/activated_point.png")));
                }
            });
            
            //Adicionando o componentes e renovando grafico
            Map.add(princ);
            Map.paintComponents(universal_graph);
        }
       
        
        public int getX(){
            return this.coordinates_x;
        }
        
        public int getY(){
            return this.coordinates_y;
        }
        
        public String getName(){
            return this.name;
        }
        
        public int getId(){
            return this.id_cidade;
        }
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel AdicionarPontos;
    private javax.swing.JButton ButtonAdd;
    private javax.swing.JButton ButtonCancel;
    private javax.swing.JComboBox<String> ComboCitys;
    private javax.swing.JButton Listar;
    private javax.swing.JLabel Map;
    private javax.swing.JPanel PanelMap;
    private javax.swing.JMenuBar SuperiorMenu;
    private javax.swing.JLabel Title1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
