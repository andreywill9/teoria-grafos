/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package front;

import Connection.ConnectionFactory;
import front.Sobre;
import model.*;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.geom.Line2D;
import java.nio.charset.StandardCharsets;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import model.bellman.ford.MetricaCalculo;
import model.bellman.ford.ResultCaminho;

/**
 *
 * @author 55119
 */
public class Principal extends javax.swing.JFrame{
    ApplicationFactory appBanco = new ApplicationFactory(); //Aplicação do grafo
    ArrayList<Point> listaPontos = new ArrayList(); //Armazenando pontos adicionados no mapa
    Color corAtiva  = Color.BLUE; //Cor quando a aresta está ativada
    Color corDesativa  = Color.RED; //Cor quando a aresta está desativada
    MetricaCalculo metrica = MetricaCalculo.CUSTO;
    int qtdeClicksNaTela = 0; //Ajuda a adicionar a aresta, sendo o segundo click em um vértice, que vai adicionar a aresta
    Vertice primeiroVerticeClicado = null;
    Vertice ultimoVerticeClicado = null;
    int limiteTotalCidadesNovas = 20;
    int xNow = 0;
    int yNow = 0;
    ConnectionFactory conn;
    boolean permitirAdicaoPontos = false; //permitir adicionar vértice
    boolean permitirRemocaoPontos = false;
    boolean permitirAdicaoConexao = false;
    boolean permitirRemocaoConexao = false;
    boolean permitirCaminharMinimo = false;
    boolean permitirReportarErroPonto = false;
    boolean permitirReportarErroEnlace = false;
    Graphics graficoUniversal; //grafico para desenhos das arestas e vértices
    Sobre sobre;
    ArrayList<Lines> listaLinhasDoGrafico = new ArrayList();
    
    List<Aresta> listaArestasApp = null;
    List<Vertice> listaVerticeApp = null;
    
    
    int xMouse = 0;
    int yMouse = 0;
    
    
    /**
     * Creates new form Principal
     */
    public Principal() throws Exception {
        conn = new ConnectionFactory();
        //pack();
        initComponents();
        initComponents2();
        Listar.doClick();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        TitleBar = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        Listar = new javax.swing.JButton();
        JScrollMap = new javax.swing.JScrollPane();
        PanelMap = new javax.swing.JPanel();
        Map = new javax.swing.JLabel();
        AdicionarPontos = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        AdicionarPontosButton = new javax.swing.JButton();
        ButtonCancel = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        ComboCitys = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        SiglaAdd = new javax.swing.JTextField();
        SuperiorMenuFrame = new javax.swing.JInternalFrame();
        SuperiorMenu = new javax.swing.JMenuBar();
        PontosMenu = new javax.swing.JMenu();
        AddPontos = new javax.swing.JMenuItem();
        RemovePontos = new javax.swing.JMenuItem();
        EnlacesMenu = new javax.swing.JMenu();
        AddEnlaces = new javax.swing.JMenuItem();
        RemoveEnlaces = new javax.swing.JMenuItem();
        CaminhoMinimo = new javax.swing.JMenu();
        AplicarDistancia = new javax.swing.JMenuItem();
        AplicarCusto = new javax.swing.JMenuItem();
        AplicarHops = new javax.swing.JMenuItem();
        ReportErro = new javax.swing.JMenu();
        ErroPonto = new javax.swing.JMenuItem();
        ErroEnlace = new javax.swing.JMenuItem();
        SobreMenu = new javax.swing.JMenu();
        AdicionarEnlaces = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        AdicionarEnlaceButton = new javax.swing.JButton();
        ButtonCancel1 = new javax.swing.JButton();
        Hops = new javax.swing.JFormattedTextField();
        HopsLabel = new javax.swing.JLabel();
        CidadeCity1 = new javax.swing.JLabel();
        CidadeCity2 = new javax.swing.JLabel();
        SiglaCity2 = new javax.swing.JLabel();
        SiglaCity1 = new javax.swing.JLabel();
        DistanciaLabel = new javax.swing.JLabel();
        CuatoLabel = new javax.swing.JLabel();
        Distancia = new javax.swing.JTextField();
        Custo = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        StatusGeral = new javax.swing.JLabel();
        BackgroundMap = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Projeto Roteamento");
        setBackground(new java.awt.Color(51, 51, 51));
        setMinimumSize(new java.awt.Dimension(900, 800));
        setUndecorated(true);
        setResizable(false);
        setSize(new java.awt.Dimension(900, 800));
        getContentPane().setLayout(null);

        TitleBar.setBackground(new java.awt.Color(204, 204, 204));
        TitleBar.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                TitleBarMouseDragged(evt);
            }
        });
        TitleBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                TitleBarMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                TitleBarMouseReleased(evt);
            }
        });
        TitleBar.setLayout(null);

        jLabel1.setBackground(new java.awt.Color(204, 204, 204));
        jLabel1.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 0, 0));
        jLabel1.setText("Projeto Roteamento");
        TitleBar.add(jLabel1);
        jLabel1.setBounds(400, 0, 130, 30);

        jLabel4.setBackground(new java.awt.Color(204, 204, 204));
        jLabel4.setForeground(new java.awt.Color(0, 0, 0));
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/minimizar.png"))); // NOI18N
        jLabel4.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel4MousePressed(evt);
            }
        });
        TitleBar.add(jLabel4);
        jLabel4.setBounds(840, 0, 30, 30);

        jLabel5.setBackground(new java.awt.Color(204, 204, 204));
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/fechar.png"))); // NOI18N
        jLabel5.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel5.setOpaque(true);
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel5MousePressed(evt);
            }
        });
        TitleBar.add(jLabel5);
        jLabel5.setBounds(870, 0, 40, 30);

        getContentPane().add(TitleBar);
        TitleBar.setBounds(0, 0, 900, 30);

        Listar.setBackground(new java.awt.Color(51, 51, 51));
        Listar.setForeground(new java.awt.Color(255, 255, 255));
        Listar.setText("Listar conexões");
        Listar.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        Listar.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        Listar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                ListarMousePressed(evt);
            }
        });
        getContentPane().add(Listar);
        Listar.setBounds(730, 70, 130, 20);

        JScrollMap.setBorder(null);
        JScrollMap.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        JScrollMap.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);
        JScrollMap.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        JScrollMap.setName("JScrollMap"); // NOI18N
        JScrollMap.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                JScrollMapMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                JScrollMapMouseReleased(evt);
            }
        });

        PanelMap.setBackground(new java.awt.Color(51, 51, 51));
        PanelMap.setAutoscrolls(true);
        PanelMap.setPreferredSize(new java.awt.Dimension(900, 820));
        PanelMap.setLayout(null);

        Map.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/mapa_esse.png"))); // NOI18N
        Map.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        Map.setEnabled(false);
        Map.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        Map.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                MapMousePressed(evt);
            }
        });
        PanelMap.add(Map);
        Map.setBounds(0, 0, 900, 900);

        JScrollMap.setViewportView(PanelMap);

        getContentPane().add(JScrollMap);
        JScrollMap.setBounds(0, 60, 900, 710);
        JScrollMap.getVerticalScrollBar().setEnabled(false);

        AdicionarPontos.setBackground(new java.awt.Color(0,0,0,200));
        AdicionarPontos.setEnabled(false);
        AdicionarPontos.setMinimumSize(new java.awt.Dimension(880, 934));
        AdicionarPontos.setName("AdicionarPontos"); // NOI18N
        AdicionarPontos.setPreferredSize(new java.awt.Dimension(880, 934));
        AdicionarPontos.setLayout(null);

        jPanel1.setBackground(new java.awt.Color(49, 49, 49));
        jPanel1.setLayout(null);

        AdicionarPontosButton.setBackground(new java.awt.Color(51, 51, 51));
        AdicionarPontosButton.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        AdicionarPontosButton.setForeground(new java.awt.Color(255, 255, 255));
        AdicionarPontosButton.setText("Adicionar");
        AdicionarPontosButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AdicionarPontosButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                AdicionarPontosButtonMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                AdicionarPontosButtonMouseExited(evt);
            }
        });
        AdicionarPontosButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdicionarPontosButtonActionPerformed(evt);
            }
        });
        jPanel1.add(AdicionarPontosButton);
        AdicionarPontosButton.setBounds(20, 330, 250, 40);

        ButtonCancel.setBackground(new java.awt.Color(51, 51, 51));
        ButtonCancel.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        ButtonCancel.setForeground(new java.awt.Color(255, 255, 255));
        ButtonCancel.setText("Cancelar");
        ButtonCancel.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonCancel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ButtonCancelMouseClicked(evt);
            }
        });
        ButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelActionPerformed(evt);
            }
        });
        jPanel1.add(ButtonCancel);
        ButtonCancel.setBounds(280, 330, 250, 40);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Sigla");
        jPanel1.add(jLabel2);
        jLabel2.setBounds(250, 140, 60, 22);

        ComboCitys.setBackground(new java.awt.Color(204, 204, 204));
        ComboCitys.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        ComboCitys.setForeground(new java.awt.Color(0, 0, 0));
        jPanel1.add(ComboCitys);
        ComboCitys.setBounds(120, 60, 330, 40);

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Cidade");
        jPanel1.add(jLabel3);
        jLabel3.setBounds(250, 30, 60, 22);

        SiglaAdd.setBackground(new java.awt.Color(204, 204, 204));
        SiglaAdd.setColumns(3);
        SiglaAdd.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        SiglaAdd.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        SiglaAdd.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                SiglaAddInputMethodTextChanged(evt);
            }
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
            }
        });
        SiglaAdd.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                SiglaAddKeyReleased(evt);
            }
        });
        jPanel1.add(SiglaAdd);
        SiglaAdd.setBounds(120, 170, 320, 40);

        AdicionarPontos.add(jPanel1);
        jPanel1.setBounds(170, 260, 550, 390);

        getContentPane().add(AdicionarPontos);
        AdicionarPontos.setBounds(0, -50, 900, 980);
        AdicionarPontos.setVisible(false);

        SuperiorMenuFrame.setMaximumSize(new java.awt.Dimension(20, 20));
        SuperiorMenuFrame.setMinimumSize(new java.awt.Dimension(20, 20));
        SuperiorMenuFrame.setNormalBounds(new java.awt.Rectangle(0, 20, 900, 20));
        SuperiorMenuFrame.setPreferredSize(new java.awt.Dimension(20, 20));
        SuperiorMenuFrame.setVisible(true);
        SuperiorMenuFrame.getContentPane().setLayout(null);

        SuperiorMenu.setBackground(new java.awt.Color(51, 51, 51));
        SuperiorMenu.setBorder(null);
        SuperiorMenu.setForeground(new java.awt.Color(255, 255, 255));
        SuperiorMenu.setPreferredSize(new java.awt.Dimension(900, 30));

        PontosMenu.setBackground(new java.awt.Color(51, 51, 51));
        PontosMenu.setForeground(new java.awt.Color(255, 255, 255));
        PontosMenu.setText("Pontos");
        PontosMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        PontosMenu.setEnabled(false);
        PontosMenu.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        PontosMenu.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        AddPontos.setBackground(new java.awt.Color(51, 51, 51));
        AddPontos.setForeground(new java.awt.Color(255, 255, 255));
        AddPontos.setText("Habilitar adição de pontos");
        AddPontos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AddPontos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddPontosActionPerformed(evt);
            }
        });
        PontosMenu.add(AddPontos);

        RemovePontos.setBackground(new java.awt.Color(51, 51, 51));
        RemovePontos.setForeground(new java.awt.Color(255, 255, 255));
        RemovePontos.setText("Habilitar remoção de pontos");
        RemovePontos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RemovePontos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemovePontosActionPerformed(evt);
            }
        });
        PontosMenu.add(RemovePontos);

        SuperiorMenu.add(PontosMenu);

        EnlacesMenu.setBackground(new java.awt.Color(51, 51, 51));
        EnlacesMenu.setForeground(new java.awt.Color(255, 255, 255));
        EnlacesMenu.setText("Enlaces");
        EnlacesMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        EnlacesMenu.setEnabled(false);
        EnlacesMenu.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        EnlacesMenu.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        AddEnlaces.setBackground(new java.awt.Color(51, 51, 51));
        AddEnlaces.setForeground(new java.awt.Color(255, 255, 255));
        AddEnlaces.setText("Habilitar adição de enlaces");
        AddEnlaces.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AddEnlaces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddEnlacesActionPerformed(evt);
            }
        });
        EnlacesMenu.add(AddEnlaces);

        RemoveEnlaces.setBackground(new java.awt.Color(51, 51, 51));
        RemoveEnlaces.setForeground(new java.awt.Color(255, 255, 255));
        RemoveEnlaces.setText("Habilitar remoção de enlaces");
        RemoveEnlaces.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        RemoveEnlaces.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RemoveEnlacesActionPerformed(evt);
            }
        });
        EnlacesMenu.add(RemoveEnlaces);

        SuperiorMenu.add(EnlacesMenu);

        CaminhoMinimo.setBackground(new java.awt.Color(51, 51, 51));
        CaminhoMinimo.setForeground(new java.awt.Color(255, 255, 255));
        CaminhoMinimo.setText("Caminho Mínimo");
        CaminhoMinimo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        CaminhoMinimo.setEnabled(false);
        CaminhoMinimo.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        CaminhoMinimo.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        AplicarDistancia.setBackground(new java.awt.Color(51, 51, 51));
        AplicarDistancia.setForeground(new java.awt.Color(255, 255, 255));
        AplicarDistancia.setText("Percorrer caminho mínimo com DISTANCIA");
        AplicarDistancia.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AplicarDistancia.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AplicarDistanciaActionPerformed(evt);
            }
        });
        CaminhoMinimo.add(AplicarDistancia);

        AplicarCusto.setBackground(new java.awt.Color(51, 51, 51));
        AplicarCusto.setForeground(new java.awt.Color(255, 255, 255));
        AplicarCusto.setText("Percorrer caminho mínimo com CUSTO");
        AplicarCusto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AplicarCusto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AplicarCustoActionPerformed(evt);
            }
        });
        CaminhoMinimo.add(AplicarCusto);

        AplicarHops.setBackground(new java.awt.Color(51, 51, 51));
        AplicarHops.setForeground(new java.awt.Color(255, 255, 255));
        AplicarHops.setText("Percorrer caminho mínimo com HOPS");
        AplicarHops.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AplicarHops.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AplicarHopsActionPerformed(evt);
            }
        });
        CaminhoMinimo.add(AplicarHops);

        SuperiorMenu.add(CaminhoMinimo);

        ReportErro.setBackground(new java.awt.Color(51, 51, 51));
        ReportErro.setForeground(new java.awt.Color(255, 255, 255));
        ReportErro.setText("Erro");
        ReportErro.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ReportErro.setEnabled(false);
        ReportErro.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        ReportErro.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        ErroPonto.setBackground(new java.awt.Color(51, 51, 51));
        ErroPonto.setForeground(new java.awt.Color(255, 255, 255));
        ErroPonto.setText("Reportar erro/ajuste em ponto");
        ErroPonto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ErroPonto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ErroPontoActionPerformed(evt);
            }
        });
        ReportErro.add(ErroPonto);

        ErroEnlace.setBackground(new java.awt.Color(51, 51, 51));
        ErroEnlace.setForeground(new java.awt.Color(255, 255, 255));
        ErroEnlace.setText("Reportar erro/ajuste em enlace");
        ErroEnlace.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ErroEnlace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ErroEnlaceActionPerformed(evt);
            }
        });
        ReportErro.add(ErroEnlace);

        SuperiorMenu.add(ReportErro);

        SobreMenu.setBackground(new java.awt.Color(51, 51, 51));
        SobreMenu.setForeground(new java.awt.Color(255, 255, 255));
        SobreMenu.setText("Sobre");
        SobreMenu.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        SobreMenu.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        SobreMenu.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        SobreMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                SobreMenuMouseClicked(evt);
            }
        });
        SuperiorMenu.add(SobreMenu);

        SuperiorMenuFrame.setJMenuBar(SuperiorMenu);

        getContentPane().add(SuperiorMenuFrame);
        SuperiorMenuFrame.setBounds(0, 30, 900, 30);
        ((BasicInternalFrameUI)SuperiorMenuFrame.getUI()).setNorthPane(null);
        SuperiorMenuFrame.setBorder(null);

        AdicionarEnlaces.setBackground(new java.awt.Color(0,0,0,200));
        AdicionarEnlaces.setEnabled(false);
        AdicionarEnlaces.setMinimumSize(new java.awt.Dimension(900, 934));
        AdicionarEnlaces.setName("AdicionarEnlaces"); // NOI18N
        AdicionarEnlaces.setLayout(null);

        jPanel2.setBackground(new java.awt.Color(49, 49, 49));
        jPanel2.setLayout(null);

        AdicionarEnlaceButton.setBackground(new java.awt.Color(51, 51, 51));
        AdicionarEnlaceButton.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        AdicionarEnlaceButton.setForeground(new java.awt.Color(255, 255, 255));
        AdicionarEnlaceButton.setText("Adicionar");
        AdicionarEnlaceButton.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        AdicionarEnlaceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AdicionarEnlaceButtonActionPerformed(evt);
            }
        });
        jPanel2.add(AdicionarEnlaceButton);
        AdicionarEnlaceButton.setBounds(80, 300, 250, 40);

        ButtonCancel1.setBackground(new java.awt.Color(51, 51, 51));
        ButtonCancel1.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        ButtonCancel1.setForeground(new java.awt.Color(255, 255, 255));
        ButtonCancel1.setText("Cancelar");
        ButtonCancel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonCancel1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancel1ActionPerformed(evt);
            }
        });
        jPanel2.add(ButtonCancel1);
        ButtonCancel1.setBounds(380, 300, 250, 40);

        Hops.setEditable(false);
        Hops.setBackground(new java.awt.Color(204, 204, 204));
        Hops.setForeground(new java.awt.Color(0, 0, 0));
        Hops.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat(""))));
        Hops.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Hops.setText("1");
        Hops.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        jPanel2.add(Hops);
        Hops.setBounds(460, 170, 170, 40);

        HopsLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        HopsLabel.setForeground(new java.awt.Color(255, 255, 255));
        HopsLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        HopsLabel.setText("Hops");
        jPanel2.add(HopsLabel);
        HopsLabel.setBounds(460, 140, 170, 22);

        CidadeCity1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        CidadeCity1.setForeground(new java.awt.Color(255, 255, 255));
        CidadeCity1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CidadeCity1.setText("Cidade");
        jPanel2.add(CidadeCity1);
        CidadeCity1.setBounds(10, 40, 300, 22);

        CidadeCity2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        CidadeCity2.setForeground(new java.awt.Color(255, 255, 255));
        CidadeCity2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CidadeCity2.setText("Cidade");
        jPanel2.add(CidadeCity2);
        CidadeCity2.setBounds(340, 40, 300, 22);

        SiglaCity2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        SiglaCity2.setForeground(new java.awt.Color(255, 255, 255));
        SiglaCity2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SiglaCity2.setText("Sigla");
        jPanel2.add(SiglaCity2);
        SiglaCity2.setBounds(340, 80, 300, 22);

        SiglaCity1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        SiglaCity1.setForeground(new java.awt.Color(255, 255, 255));
        SiglaCity1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        SiglaCity1.setText("Sigla");
        jPanel2.add(SiglaCity1);
        SiglaCity1.setBounds(10, 80, 300, 22);

        DistanciaLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        DistanciaLabel.setForeground(new java.awt.Color(255, 255, 255));
        DistanciaLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        DistanciaLabel.setText("Distância (KM)");
        jPanel2.add(DistanciaLabel);
        DistanciaLabel.setBounds(60, 140, 170, 22);

        CuatoLabel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        CuatoLabel.setForeground(new java.awt.Color(255, 255, 255));
        CuatoLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        CuatoLabel.setText("Custo");
        jPanel2.add(CuatoLabel);
        CuatoLabel.setBounds(260, 140, 170, 22);

        Distancia.setBackground(new java.awt.Color(204, 204, 204));
        Distancia.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        Distancia.setForeground(new java.awt.Color(0, 0, 0));
        Distancia.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Distancia.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                DistanciaKeyReleased(evt);
            }
        });
        jPanel2.add(Distancia);
        Distancia.setBounds(60, 170, 170, 40);

        Custo.setBackground(new java.awt.Color(204, 204, 204));
        Custo.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        Custo.setForeground(new java.awt.Color(0, 0, 0));
        Custo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        Custo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                CustoKeyReleased(evt);
            }
        });
        jPanel2.add(Custo);
        Custo.setBounds(260, 170, 170, 40);

        AdicionarEnlaces.add(jPanel2);
        jPanel2.setBounds(110, 250, 670, 370);

        getContentPane().add(AdicionarEnlaces);
        AdicionarEnlaces.setBounds(0, -50, 900, 980);
        AdicionarEnlaces.setVisible(false);

        jPanel3.setBackground(new java.awt.Color(51, 51, 51));

        StatusGeral.setBackground(new java.awt.Color(51, 51, 51));
        StatusGeral.setFont(new java.awt.Font("Dialog", 0, 14)); // NOI18N
        StatusGeral.setForeground(new java.awt.Color(255, 255, 255));
        StatusGeral.setText("Bem vindo ao Projeto de Roteamento!");
        StatusGeral.setToolTipText("");
        jPanel3.add(StatusGeral);

        getContentPane().add(jPanel3);
        jPanel3.setBounds(-20, 770, 920, 30);

        BackgroundMap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/mapa_esse.png"))); // NOI18N
        BackgroundMap.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        BackgroundMap.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
        getContentPane().add(BackgroundMap);
        BackgroundMap.setBounds(0, 20, 900, 900);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void initComponents2(){
        //Capturando grafico inicial para conseguir serem feitas as alterações a partir de um segundo grafico
        //Executando JFrame no meio da tela
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width/2-this.getSize().width/2,dim.height/2-this.getSize().height/2);
        graficoUniversal =  Map.getGraphics();
        
        //Ao Scroll vertical ser soltado, renovar mapa.
        JScrollMap.getVerticalScrollBar().addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    resetarMapaSomente();
                }
        });
        this.addWindowListener(new WindowAdapter(){
            @Override
            public void windowActivated(WindowEvent we){
                resetarMapaSomente();
            }
            public void windowDraggedS(WindowEvent we){
                resetarMapaSomente();
            }
        });        
        sobre = new Sobre();
        
    }
    
    private void initVertices(){
        //Adicionando os vertices ao grafico
        atualizarConexoes();
        this.listaPontos = new ArrayList();
        List<Vertice> vertices = appBanco.getTodasCidades();
        for (int i=0; i<vertices.size(); i++) {
            byte[] tempNome = vertices.get(i).getNomeCidade().getBytes();
            vertices.get(i).setNomeCidade(new String(tempNome));
            addPoint(vertices.get(i));
        }
    }
    
    private void initConections(){
        //Adicionando conexões ao gráfico
        atualizarConexoes();
        this.listaLinhasDoGrafico = new ArrayList();
        for (int i=0; i<this.listaArestasApp.size(); i++) {
            addAresta(this.listaArestasApp.get(i));
        }
    }
    
    private void addAresta(Aresta aresta){
        Lines line = new Lines(aresta);
        this.listaLinhasDoGrafico.add(line);
    }
    
    void addPoint(Vertice vertice){
        //Cria objeto point e adiciona na lista de pontos
        Point point = new Point(vertice);
        listaPontos.add(point);
    }
    
    private void resetarGrafico(){
        //Irá resetar o grafico, removendo arestas
        graficoUniversal = Map.getGraphics();
        Map.paint(Map.getGraphics());
    }
    
    
    void resetarMapaSomente(){
        if(!(this.AdicionarPontos.isVisible() || this.AdicionarEnlaces.isVisible())){
            this.Map.removeAll();
            resetarGrafico();
            for (int i=0; i<listaPontos.size(); i++) {
                this.Map.add(listaPontos.get(i).getPainelPrincipal());
            }
            for (int i=0; i<listaLinhasDoGrafico.size(); i++) {
                listaLinhasDoGrafico.get(i).desenharLinha();
            }
            Map.paintComponents(graficoUniversal);
        }
        
    }
    
    private void setClick(){
        //Adiciona um click, contabilizando os clicks em vértices
        this.qtdeClicksNaTela +=1;
    }
    
    private ArrayList<String> search_city(int x, int y) throws Exception{
        //Realiza os cálculos de longitude e latitude e procura as cidades
        System.out.println(x + "," + y);
        ArrayList<String>  names_city = new ArrayList();
        double latitude = 5.48155495 + (y*-0.04885256);
        double longitude = -74.28821548 + (x*0.04895532);
        try {
            names_city = viewTable(latitude, longitude);
        } catch (SQLException ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        return names_city;
    }
    
    private void addLinhaAresta(){
        //Adiciona linha de aresta a partir dos cliques

        if(this.qtdeClicksNaTela == 2){
            if(procurarArestaPorVertices() != null){
                this.qtdeClicksNaTela=0;
                escreverStatusGeral("Conexão já existente!");
                JOptionPane.showMessageDialog(null, "Bom, acho que essa conexão já existe, não acha? rs");
                resetarMapaSomente();
            }else{
                this.AdicionarEnlaces.setVisible(true);
                this.AdicionarPontos.setVisible(false);
                this.SuperiorMenuFrame.setVisible(false);
                this.JScrollMap.setVisible(false);

                this.Distancia.setText("");
                this.Custo.setText("");

                this.CidadeCity1.setText(this.primeiroVerticeClicado.getNomeCidade());
                this.CidadeCity2.setText(this.ultimoVerticeClicado.getNomeCidade());

                this.SiglaCity1.setText(this.primeiroVerticeClicado.getSigla());
                this.SiglaCity2.setText(this.ultimoVerticeClicado.getSigla());
            }
            this.EnlacesMenu.setEnabled(true);
        }
        
    }

    
    private void configurarClique(Vertice vertice){
        boolean status = false;
        if(this.qtdeClicksNaTela == 1){
            this.primeiroVerticeClicado = vertice;
            EnlacesMenu.setEnabled(false);
            ReportErro.setEnabled(false);
            CaminhoMinimo.setEnabled(false);
            PontosMenu.setEnabled(false);
            
        }
        if(this.qtdeClicksNaTela == 2){
            this.ultimoVerticeClicado = vertice;
            status = true;
        }
        //ReportErro.setEnabled(status);
        //EnlacesMenu.setEnabled(status);
        //PontosMenu.setEnabled(status);
        //CaminhoMinimo.setEnabled(status);
        this.escreverStatusGeral();
    }

    private void ButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCancelActionPerformed
        //Adiciona novo ponto ao grafico a partir da entrada do usuário
        this.AdicionarEnlaces.setVisible(false);
        this.AdicionarPontos.setVisible(false);
        this.SuperiorMenuFrame.setVisible(true);
        this.JScrollMap.setVisible(true);
        escreverStatusGeral("Você cancelou a adição de um novo ponto de conexão!");
        JOptionPane.showMessageDialog(null, "Operação cancelada com sucesso!");
        recarregarMapa();
        
    }//GEN-LAST:event_ButtonCancelActionPerformed

    private void AddPontosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPontosActionPerformed
        //Permitindo o clique para adição de novo ponto
        if(!this.permitirAdicaoPontos){
            this.permitirAdicaoPontos = true;
            AddPontos.setText("Desabilitar adição de pontos");
            
            EnlacesMenu.setEnabled(false);
            ReportErro.setEnabled(false);
            CaminhoMinimo.setEnabled(false);
            this.Map.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
            
            RemovePontos.setEnabled(false);
        }else{
            this.permitirAdicaoPontos = false;
            AddPontos.setText("Habilitar adição de pontos");
            
            EnlacesMenu.setEnabled(true);
            ReportErro.setEnabled(true);
            CaminhoMinimo.setEnabled(true);
            RemovePontos.setEnabled(true);
            this.Map.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
            RemovePontos.setEnabled(true);
        }
    }//GEN-LAST:event_AddPontosActionPerformed

    private void AdicionarPontosButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdicionarPontosButtonActionPerformed
        this.Map.repaint();
        this.Map.removeAll();
        String string_selecionado = ComboCitys.getSelectedItem().toString();
        int pontosQuantidadeAntigo = this.listaVerticeApp.size();
        if(this.SiglaAdd.getText().contains("[^A-Z]")){
            JOptionPane.showMessageDialog(null, "Digite uma sigla válida, somente é permitido letras");
        }else if(this.SiglaAdd.getText().length() > 3 || this.SiglaAdd.getText().length() < 3){
            JOptionPane.showMessageDialog(null, "Digite uma sigla válida, é permitido somente 3 letras!");
        }else{
            try {
                this.appBanco.cadastrarCidade(string_selecionado, SiglaAdd.getText().toUpperCase(), this.xNow, this.yNow);
            } catch (Exception ex) {
                //Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
            this.AdicionarEnlaces.setVisible(false);
            this.AdicionarPontos.setVisible(false);
            this.SuperiorMenuFrame.setVisible(true);
            this.JScrollMap.setVisible(true);
            atualizarConexoes();
            if(pontosQuantidadeAntigo == this.listaVerticeApp.size()){
                JOptionPane.showMessageDialog(null,"Houve algum erro na adição de pontos... ");
                escreverStatusGeral("O ponto de conexão não foi adicionado, verifique a sigla ou nome, e se já existem!");
            }else{
                JOptionPane.showMessageDialog(null,"Ponto adicionado com sucesso!");
                escreverStatusGeral(String.format("O ponto de conexão de %s foi adicionado com sucesso!", string_selecionado.toUpperCase()));
            }
            recarregarMapa(); 
        }
    }//GEN-LAST:event_AdicionarPontosButtonActionPerformed

    private void ButtonCancelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ButtonCancelMouseClicked
        //Cancelando operação de adição de novo ponto
        this.AdicionarEnlaces.setVisible(false);
        this.AdicionarPontos.setVisible(false);
        this.SuperiorMenuFrame.setVisible(true);
        this.JScrollMap.setVisible(true);
        escreverStatusGeral("A ligação de pontos de conexão foi cancelada!");
        JOptionPane.showMessageDialog(null,"Operação cancelada com sucesso!");
        recarregarMapa();
    }//GEN-LAST:event_ButtonCancelMouseClicked

    private void RemovePontosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemovePontosActionPerformed
        //Permitindo o clique para adição de novo ponto
        if(!this.permitirRemocaoPontos){
            this.permitirRemocaoPontos = true;
            RemovePontos.setText("Desabilitar remoção de pontos");
            
            
            EnlacesMenu.setEnabled(false);
            ReportErro.setEnabled(false);
            CaminhoMinimo.setEnabled(false);
            
            AddPontos.setEnabled(false);
        }else{
            this.permitirRemocaoPontos = false;
            RemovePontos.setText("Habilitar remoção de pontos");
            EnlacesMenu.setEnabled(true);
            ReportErro.setEnabled(true);
            CaminhoMinimo.setEnabled(true);
            
            AddPontos.setEnabled(true);
        }
        
    }//GEN-LAST:event_RemovePontosActionPerformed

    private void AdicionarEnlaceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AdicionarEnlaceButtonActionPerformed
        this.qtdeClicksNaTela = 0;
        int quantidadeAntigaListaAresta = this.listaArestasApp.size();
        if(Distancia.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Preencha o campo de Distância!");
        }else if(Custo.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Preencha o campo de Custo!");
        }else{
            try {
                this.appBanco.cadastrarConexao(this.primeiroVerticeClicado, this.ultimoVerticeClicado, Integer.parseInt(Distancia.getText()), Integer.parseInt(Custo.getText()));
            } catch (Exception ex) {
                //Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            this.AdicionarEnlaces.setVisible(false);
            this.AdicionarPontos.setVisible(false);
            this.SuperiorMenuFrame.setVisible(true);
            this.JScrollMap.setVisible(true);
            atualizarConexoes();
            
            if(quantidadeAntigaListaAresta != this.listaArestasApp.size()){
                JOptionPane.showMessageDialog(null,"Adicionado com sucesso!");
                escreverStatusGeral(String.format("A conexão entre %s e %s foi adicionado com sucesso!", this.primeiroVerticeClicado.getNomeCidade().toUpperCase(), this.ultimoVerticeClicado.getNomeCidade().toUpperCase()));
            }else{
                JOptionPane.showMessageDialog(null,"Falha ao adicionar enlace!");
                escreverStatusGeral(String.format("A conexão entre %s e %s foi parece que já existe...", this.primeiroVerticeClicado.getNomeCidade().toUpperCase(), this.ultimoVerticeClicado.getNomeCidade().toUpperCase()));
            }
            EnlacesMenu.setEnabled(true);
            recarregarMapa();   
        }
        
        
    }//GEN-LAST:event_AdicionarEnlaceButtonActionPerformed

    private void ButtonCancel1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCancel1ActionPerformed
        this.qtdeClicksNaTela = 0;
        this.AdicionarEnlaces.setVisible(false);
        this.AdicionarPontos.setVisible(false);
        this.SuperiorMenuFrame.setVisible(true);
        this.JScrollMap.setVisible(true);
        EnlacesMenu.setEnabled(true);
        escreverStatusGeral(String.format("A conexão entre %s e %s foi cancelada com sucesso", this.primeiroVerticeClicado.getNomeCidade().toUpperCase(), this.ultimoVerticeClicado.getNomeCidade().toUpperCase()));
        JOptionPane.showMessageDialog(null,"Operação Cancelada");
        recarregarMapa();
        
    }//GEN-LAST:event_ButtonCancel1ActionPerformed

    private void AddEnlacesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddEnlacesActionPerformed
        //Permitindo o clique para adição de novo ponto
        if(!this.permitirAdicaoConexao){
            
            this.permitirAdicaoConexao = true;
            AddEnlaces.setText("Desabilitar adição de enlaces");
            
            PontosMenu.setEnabled(false);
            ReportErro.setEnabled(false);
            CaminhoMinimo.setEnabled(false);
            
            RemoveEnlaces.setEnabled(false);
            
        }else{
            this.permitirAdicaoConexao = false;
            AddEnlaces.setText("Habilitar adição de enlaces");
            
            PontosMenu.setEnabled(true);
            ReportErro.setEnabled(true);
            CaminhoMinimo.setEnabled(true);
            
            RemoveEnlaces.setEnabled(true);
        }
    }//GEN-LAST:event_AddEnlacesActionPerformed

    private void AplicarCustoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AplicarCustoActionPerformed
        if(!this.permitirCaminharMinimo){
            this.permitirCaminharMinimo = true;
            this.permitirAdicaoConexao = false;
            AplicarCusto.setText("Parar de percorrer caminho mínimo");
            this.metrica = MetricaCalculo.CUSTO;
            
            AplicarHops.setEnabled(false);
            AplicarDistancia.setEnabled(false);
            ReportErro.setEnabled(false);
            PontosMenu.setEnabled(false);
            
            EnlacesMenu.setEnabled(false);
            
        }else{
            this.permitirCaminharMinimo = false;
            AplicarCusto.setText("Percorrer caminho mínimo com CUSTO");
            AplicarHops.setEnabled(true);
            AplicarDistancia.setEnabled(true);
            ReportErro.setEnabled(true);
            EnlacesMenu.setEnabled(true);
            PontosMenu.setEnabled(true);
        }
    }//GEN-LAST:event_AplicarCustoActionPerformed

    private void AplicarHopsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AplicarHopsActionPerformed
        if(!this.permitirCaminharMinimo){
            this.permitirCaminharMinimo = true;
            this.permitirAdicaoConexao = false;
            AplicarHops.setText("Parar de percorrer caminho mínimo");
            this.metrica = MetricaCalculo.SALTO;
            
            AplicarDistancia.setEnabled(false);
            AplicarCusto.setEnabled(false);
            ReportErro.setEnabled(false);
            PontosMenu.setEnabled(false);
            
            EnlacesMenu.setEnabled(false);
            
        }else{
            this.permitirCaminharMinimo = false;
            AplicarHops.setText("Percorrer caminho mínimo com HOPS");
            AplicarDistancia.setEnabled(true);
            AplicarCusto.setEnabled(true);
            EnlacesMenu.setEnabled(true);
            ReportErro.setEnabled(true);
            PontosMenu.setEnabled(true);
        }
    }//GEN-LAST:event_AplicarHopsActionPerformed

    private void ErroEnlaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ErroEnlaceActionPerformed
        if(!this.permitirReportarErroEnlace){
            this.permitirReportarErroEnlace = true;
            EnlacesMenu.setEnabled(false);
            PontosMenu.setEnabled(false);
            CaminhoMinimo.setEnabled(false);
            
            ErroPonto.setEnabled(false);
            
            ErroEnlace.setText("Desabilitar reporte de erro/ajuste enlace");
            
        }else{
            this.permitirReportarErroEnlace = false;
            EnlacesMenu.setEnabled(true);
            PontosMenu.setEnabled(true);
            CaminhoMinimo.setEnabled(true);
            
            ErroPonto.setEnabled(true);
            
            ErroEnlace.setText("Reportar erro/ajuste em enlace");
        }
    }//GEN-LAST:event_ErroEnlaceActionPerformed

    private void ErroPontoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ErroPontoActionPerformed
        if(!this.permitirReportarErroPonto){
            this.permitirReportarErroPonto = true;
            EnlacesMenu.setEnabled(false);
            PontosMenu.setEnabled(false);
            CaminhoMinimo.setEnabled(false);
            
            ErroEnlace.setEnabled(false);
            
            ErroPonto.setText("Desabilitar reporte de erro/ajuste ponto");
            
        }else{
            this.permitirReportarErroPonto = false;
            EnlacesMenu.setEnabled(true);
            PontosMenu.setEnabled(true);
            CaminhoMinimo.setEnabled(true);
            
            ErroEnlace.setEnabled(true);
            
            ErroPonto.setText("Reportar erro/ajuste em ponto");
        }
        
    }//GEN-LAST:event_ErroPontoActionPerformed

    private void RemoveEnlacesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RemoveEnlacesActionPerformed
        if(!this.permitirRemocaoConexao){
            
            this.permitirRemocaoConexao = true;
            RemoveEnlaces.setText("Desabilitar remoção de enlaces");
            
            PontosMenu.setEnabled(false);
            ReportErro.setEnabled(false);
            CaminhoMinimo.setEnabled(false);
            
            AddEnlaces.setEnabled(false);
            
        }else{
            this.permitirRemocaoConexao = false;
            RemoveEnlaces.setText("Habilitar remoção de enlaces");
            
            PontosMenu.setEnabled(true);
            ReportErro.setEnabled(true);
            CaminhoMinimo.setEnabled(true);
            
            AddEnlaces.setEnabled(true);
        }
    }//GEN-LAST:event_RemoveEnlacesActionPerformed

    private void JScrollMapMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JScrollMapMouseClicked

    }//GEN-LAST:event_JScrollMapMouseClicked

    private void JScrollMapMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_JScrollMapMouseReleased
        recarregarMapa();
    }//GEN-LAST:event_JScrollMapMouseReleased

    private void SobreMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_SobreMenuMouseClicked
        this.sobre.setVisible(true);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        sobre.setLocation(dim.width/2-sobre.getSize().width/2,dim.height/2-sobre.getSize().height/2);
    }//GEN-LAST:event_SobreMenuMouseClicked

    private void AplicarDistanciaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AplicarDistanciaActionPerformed
        if(!this.permitirCaminharMinimo){
            this.permitirCaminharMinimo = true;
            this.permitirAdicaoConexao = false;
            AplicarDistancia.setText("Parar de percorrer caminho mínimo");
            this.metrica = MetricaCalculo.DISTANCIA;
            
            AplicarHops.setEnabled(false);
            AplicarCusto.setEnabled(false);
            ReportErro.setEnabled(false);
            PontosMenu.setEnabled(false);
            
            EnlacesMenu.setEnabled(false);
            
        }else{
            this.permitirCaminharMinimo = false;
            AplicarDistancia.setText("Percorrer caminho mínimo com DISTANCIA");
            AplicarHops.setEnabled(true);
            AplicarCusto.setEnabled(true);
            ReportErro.setEnabled(true);
            EnlacesMenu.setEnabled(true);
            PontosMenu.setEnabled(true);
        }
    }//GEN-LAST:event_AplicarDistanciaActionPerformed

    private void MapMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_MapMousePressed
        //Se permitida a inserção de ponto por clique, dará as opções de cidades para adição dos pontos
        if(this.permitirAdicaoPontos){
            this.xNow =evt.getX();
            this.yNow=evt.getY();
            int limite = 0;
            ArrayList<String> names_city = new ArrayList();
            try {
                names_city = search_city(this.xNow, this.yNow);
            } catch (Exception ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
            }
            if(names_city.size() > 0){
                ComboCitys.removeAllItems();
                for (int i=0;i<names_city.size();i++){
                    ComboCitys.addItem(names_city.get(i));

                }
                this.AdicionarEnlaces.setVisible(false);
                this.AdicionarPontos.setVisible(true);
                this.SiglaAdd.setText("");
                this.SuperiorMenuFrame.setVisible(false);
                this.JScrollMap.setVisible(false);
                recarregarMapa();
            }else{
                escreverStatusGeral("Nenhuma cidade próxima...");
            }
            
        }
    }//GEN-LAST:event_MapMousePressed

    private void SiglaAddInputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_SiglaAddInputMethodTextChanged
    }//GEN-LAST:event_SiglaAddInputMethodTextChanged

    private void SiglaAddKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SiglaAddKeyReleased
        SiglaAdd.setText(SiglaAdd.getText().toUpperCase());
        if(SiglaAdd.getText().length() > 3){
            SiglaAdd.setText(SiglaAdd.getText().substring(0, 3));
        }
        SiglaAdd.setText(SiglaAdd.getText().replaceAll("[^A-Z]", ""));
        
    }//GEN-LAST:event_SiglaAddKeyReleased

    private void DistanciaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DistanciaKeyReleased
        Distancia.setText(Distancia.getText().replaceAll("[^0-9]", ""));
    }//GEN-LAST:event_DistanciaKeyReleased

    private void CustoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_CustoKeyReleased
        Custo.setText(Custo.getText().replaceAll("[^0-9]", ""));
    }//GEN-LAST:event_CustoKeyReleased

    private void jLabel5MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MousePressed
        System.exit(0);
    }//GEN-LAST:event_jLabel5MousePressed

    private void TitleBarMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TitleBarMouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        
        this.setLocation(x-this.xMouse, y-this.yMouse);
    }//GEN-LAST:event_TitleBarMouseDragged

    private void TitleBarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TitleBarMousePressed
        this.xMouse = evt.getX();
        this.yMouse = evt.getY();
    }//GEN-LAST:event_TitleBarMousePressed

    private void jLabel4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MousePressed
        this.setState(javax.swing.JFrame.ICONIFIED);
    }//GEN-LAST:event_jLabel4MousePressed

    private void AdicionarPontosButtonMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AdicionarPontosButtonMouseEntered
        this.AdicionarPontos.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
    }//GEN-LAST:event_AdicionarPontosButtonMouseEntered

    private void AdicionarPontosButtonMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_AdicionarPontosButtonMouseExited
        this.AdicionarPontos.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
    }//GEN-LAST:event_AdicionarPontosButtonMouseExited

    private void ListarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ListarMousePressed
        this.EnlacesMenu.setEnabled(true);
        this.PontosMenu.setEnabled(true);
        this.Listar.setVisible(false);
        this.ReportErro.setEnabled(true);
        this.CaminhoMinimo.setEnabled(true);
        this.JScrollMap.getVerticalScrollBar().setEnabled(true);
        this.Map.setEnabled(true);
        JOptionPane.showMessageDialog(null, "Mapa iniciado!");
        atualizarConexoes();
        recarregarMapa();
    }//GEN-LAST:event_ListarMousePressed

    private void TitleBarMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TitleBarMouseReleased
        if(this.Map.isEnabled()){
            resetarMapaSomente();
        } 
    }//GEN-LAST:event_TitleBarMouseReleased
    
    private void fazerCaminhoMinimo(){
        if(this.permitirCaminharMinimo){
            if(this.qtdeClicksNaTela == 2){
                this.qtdeClicksNaTela = 0;
                ResultCaminho rc = null;
                List<Vertice> verticesResult = null;
                Vertice olderVertice = null;
                Vertice newVertice = null;

                try {
                    rc = this.appBanco.bellmanFord(this.primeiroVerticeClicado, this.ultimoVerticeClicado, this.metrica);
                    verticesResult = rc.getVertice();
                    for (int i=0; i<verticesResult.size();i++){
                        if(i > 0){
                            newVertice = verticesResult.get(i);
                            olderVertice = verticesResult.get(i-1);
                            ((Graphics2D)graficoUniversal).setColor(Color.GREEN);
                            ((Graphics2D)graficoUniversal).setStroke(new BasicStroke(3));
                            Line2D.Float line = new Line2D.Float(olderVertice.getCordenadaX(), olderVertice.getCordenadaY(), newVertice.getCordenadaX(), newVertice.getCordenadaY());
                            ((Graphics2D)graficoUniversal).draw(line);
                        }
                    }
                    escreverStatusGeral(String.format("Utilizando a métrica %s, o caminho entre %s e %s é %s", this.metrica.toString(), this.primeiroVerticeClicado.getNomeCidade().toUpperCase(), this.ultimoVerticeClicado.getNomeCidade().toUpperCase(), Integer.toString(rc.getValorPercorrido())));
                    JOptionPane.showMessageDialog(null, "Para a métrica utilizada: " + rc.getValorPercorrido());
                } catch (Exception ex) {
                    escreverStatusGeral("Esses pontos de conexão não possuem ligação!");
                    JOptionPane.showMessageDialog(null, "Bom, não foi possível realizar o caminho mínimo entre esses dois pontos!");
                }
                CaminhoMinimo.setEnabled(true);
                recarregarMapa();
            }
      }  
    }
    
    private void reportarErroCaminho(){
        if(this.permitirReportarErroEnlace){
            if(this.qtdeClicksNaTela == 2){
                this.qtdeClicksNaTela = 0;
                try {
                    Aresta conexaoDosPontosClicados = procurarArestaPorVertices();
                    this.appBanco.alterarStatusConexao(conexaoDosPontosClicados);
                    //Negando pois não foi armazenada a trc
                    if(conexaoDosPontosClicados.getArestaDisponivel()){
                        escreverStatusGeral(String.format("A conexão entre %s e %s foi ativado", this.primeiroVerticeClicado.getNomeCidade().toUpperCase(), this.ultimoVerticeClicado.getNomeCidade().toUpperCase()));
                    }else{
                        escreverStatusGeral(String.format("A conexão entre %s e %s foi desativado", this.primeiroVerticeClicado.getNomeCidade().toUpperCase(), this.ultimoVerticeClicado.getNomeCidade().toUpperCase()));
                    }
                    
                    JOptionPane.showMessageDialog(null, "Erro/Ajuste reportado com sucesso!");
                } catch (Exception ex) {
                    escreverStatusGeral(String.format("A conexão entre %s e %s não existe!", this.primeiroVerticeClicado.getNomeCidade().toUpperCase(), this.ultimoVerticeClicado.getNomeCidade().toUpperCase()));
                    JOptionPane.showMessageDialog(null, "Tente novamente, este enlace não existe!");
                }
                ReportErro.setEnabled(true);
                atualizarConexoes();
                recarregarMapa();
            }
        }
    }
    
    
    private void removerAresta(){
        if(this.permitirRemocaoConexao){
            if(this.qtdeClicksNaTela == 2){
                this.qtdeClicksNaTela = 0;
                try {
                    this.appBanco.excluirConexao(procurarArestaPorVertices());
                    escreverStatusGeral(String.format("A conexão entre as cidades %s e %s foi removida!", this.primeiroVerticeClicado.getNomeCidade().toUpperCase(), this.ultimoVerticeClicado.getNomeCidade().toUpperCase()));
                    JOptionPane.showMessageDialog(null, "Enlace removida com sucesso!");
                    atualizarConexoes();
                } catch (Exception ex) {
                    escreverStatusGeral(String.format("A conexão entre as cidades %s e %s não existe!", this.primeiroVerticeClicado.getNomeCidade().toUpperCase(), this.ultimoVerticeClicado.getNomeCidade().toUpperCase()));
                    JOptionPane.showMessageDialog(null, "Tentando excluir conexões não existentes?");
                }
                EnlacesMenu.setEnabled(true);
                recarregarMapa();
            }
        }
    }
    
    private Aresta procurarArestaPorVertices(){
        for (int i=0;i<this.listaArestasApp.size();i++){
            if(this.listaArestasApp.get(i).getOrigem().getIdCidade() == this.primeiroVerticeClicado.getIdCidade() & this.listaArestasApp.get(i).getDestino().getIdCidade() == this.ultimoVerticeClicado.getIdCidade()){
                try {
                    return this.listaArestasApp.get(i);
                } catch (Exception ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }else if(this.listaArestasApp.get(i).getOrigem().getIdCidade() == this.ultimoVerticeClicado.getIdCidade() & this.listaArestasApp.get(i).getDestino().getIdCidade() == this.primeiroVerticeClicado.getIdCidade()){
                try {
                    return this.listaArestasApp.get(i);
                } catch (Exception ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
        return null;
    }
    
    
    
    private void atualizarConexoes(){
        try {
            //Inicializando e mostrando grafo.
            this.appBanco.buscarCidades();
            this.appBanco.buscarConexoes();
        } catch (Exception ex) {
            Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.listaArestasApp = this.appBanco.getTodasConexoes();
        this.listaVerticeApp = this.appBanco.getTodasCidades();
    }
    
    
    
    
    private void recarregarMapa(){
        this.Map.removeAll();
        resetarGrafico();
        initVertices();
        initConections();
        Map.paintComponents(graficoUniversal);
    }
    
    private void escreverStatusGeral(){
        if(this.qtdeClicksNaTela == 1){
            this.StatusGeral.setText(String.format("Vertice(s) selecionado(s): %s", this.primeiroVerticeClicado.getNomeCidade().toUpperCase()));
        }else if(this.qtdeClicksNaTela == 2){
            this.StatusGeral.setText(String.format("Vertice(s) selecionado(s): %s e %s", this.primeiroVerticeClicado.getNomeCidade().toUpperCase(), this.ultimoVerticeClicado.getNomeCidade().toUpperCase()));
        }
    }
    
    private void escreverStatusGeral(String texto){
        this.StatusGeral.setText(texto);
    }
    
    
    public ArrayList<String> viewTable(double latitude , double longitude) throws Exception {
        //Após a identificação da latitude e longitude, recolhe as cidades mais próximas das quais foi clicado.
        ArrayList<String> cidadesAoRedor = new ArrayList();    
        double compare = 0.1;
        while(cidadesAoRedor.size() < limiteTotalCidadesNovas & compare < 3){
            cidadesAoRedor = new ArrayList();   
            double latitude_max = latitude + compare;
            double latitude_min = latitude - compare;
            double longitude_max = longitude + compare;
            double longitude_min = longitude - compare;

            String query = "select * from municipios WHERE latitude BETWEEN " + latitude_min + " and " + latitude_max + "" + " and " +
                    "longitude BETWEEN " + longitude_min + " and " + longitude_max + "";

            ResultSet rs = this.conn.buscar(query);
            while (rs.next()) {
              String nome = rs.getString("nome");
              cidadesAoRedor.add(nome);
            }
            compare += 0.1;
        }
        return cidadesAoRedor;
    }
    public static void main(String args[]) throws Exception {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        
        
        /* Create and display the form */
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                try {
                    new Principal().setVisible(true);
                    
                } catch (ClassNotFoundException | SQLException ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                } catch (Exception ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    
    class Point{
        //Classe de pontos, nos diz a respeito do vértice, mas armazenando suas propriedades para que possamos mudar ou excluir durante a vontade do usuário.
        private int coordinates_x = 0;
        private int coordinates_y = 0;
        private String name = "";
        private int id_cidade = 0;
        private javax.swing.JPanel princ; //Painel que armazena o ponto e sua sigla
        private javax.swing.JLabel princ_point; //Label que representa o pontp
        Vertice vertice_now;
        boolean status = true;
        String imageMouseEntered, imageMouseReleased;
        
        Point(Vertice vertice){
            princ = new javax.swing.JPanel();
            princ_point = new javax.swing.JLabel();
            this.vertice_now = vertice;
            status = vertice.getAtivo();
            
            //Configurando imagens baseado no status
            if(status){
                imageMouseEntered = "/imgs/activated_point_mouseon.png";
                imageMouseReleased = "/imgs/activated_point.png";
            }else{
                imageMouseEntered = "/imgs/deactivated_point_mouseon.png";
                imageMouseReleased = "/imgs/deactivated_point_mouseoff.png";
            }
            
            int tam_img = 20; //Tamanho da imagem referentes ao ponto
            
            //Armazenando informações principais do vertice
            this.coordinates_x = vertice.getCordenadaX();
            this.coordinates_y = vertice.getCordenadaY();
            this.name = vertice.getNomeCidade();
            this.id_cidade = vertice.getIdCidade();
            
            //Calculando as coordenadas do X, Y do Painel
            int x_locate = (coordinates_x-tam_img); 
            int y_locate = (coordinates_y-tam_img/2)-tam_img;
            
            //Configurando JLabel, que mostra a sigla do ponto
            javax.swing.JLabel label_name = new javax.swing.JLabel();
            label_name.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
            label_name.setForeground(new java.awt.Color(255, 255, 255));
            label_name.setText(vertice.getSigla());
            label_name.setBounds(10, 0, 190, 19);
            label_name.setVisible(true);
            princ.add(label_name);
            
            //Configurando Ponto em si
            princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource(imageMouseReleased)));
            princ_point.setLayout(null);
            princ_point.setBounds(10, 20, tam_img, tam_img);
            princ_point.setVisible(true);
            
            //Configurando Painel principal
            princ.setBounds(x_locate, y_locate, tam_img*2, tam_img*2);
            princ.setVisible(true);
            princ.setOpaque(false);
            princ.setLayout(null);
            
            princ.add(princ_point);
            
            
            
            
            
            //Quando o mouse é clicado
            princ_point.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseClicked(java.awt.event.MouseEvent evt) {
                }
                
                //Quando o mouse é pressionado (clicando ou segurando)
                public void mousePressed(java.awt.event.MouseEvent evt) {
                    if(permitirCaminharMinimo){
                        princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/selected_caminho.png")));
                    }else if(permitirReportarErroEnlace){
                        princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/deactivated_point_mouseoff.png")));
                    }else{
                        princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/mouse_clicking.png")));
                    }
                    actionsButton();
                    
                }
                
                //Quando o mouse para de ser pressionado
                public void mouseReleased(java.awt.event.MouseEvent evt) {
                    if(!permitirCaminharMinimo&!permitirReportarErroEnlace){
                        princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource(imageMouseReleased)));   
                    }
                }
                
                //Quando o mouse passa por cima do ponto
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    if(!permitirCaminharMinimo&!permitirReportarErroEnlace){
                        princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource(imageMouseEntered)));
                    }
                    princ_point.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
                }
                
                //Quando o mouse sai de cima do ponto
                 public void mouseExited(java.awt.event.MouseEvent evt) {
                    if(!permitirCaminharMinimo&!permitirReportarErroEnlace){
                        princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource(imageMouseReleased)));
                    }
                } 
            });
            //Adicionando o componentes e renovando grafico
            Map.add(princ);
            
        }
        
        private void actionsButton(){
            if(permitirAdicaoConexao){
                setClick();
                configurarClique(vertice_now);
                addLinhaAresta();
            }

            else if(permitirCaminharMinimo){
                setClick();
                configurarClique(vertice_now);
                fazerCaminhoMinimo();
            }

            else if(permitirReportarErroEnlace){
                try {
                    setClick();
                    configurarClique(vertice_now);
                    reportarErroCaminho();
                } catch (Exception ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            else if(permitirRemocaoConexao){
                try {
                    setClick();
                    configurarClique(vertice_now);
                    removerAresta();
                    princ_point.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgs/deactivated_point_mouseoff.png")));
                } catch (Exception ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            else if(permitirReportarErroPonto){
                try {
                    appBanco.alterarStatusCidade(vertice_now);
                    status = !status;
                    atualizarConexoes();
                    recarregarMapa();
                    if(status){
                        escreverStatusGeral(String.format("A conexão de %s foi ativada", vertice_now.getNomeCidade().toUpperCase()));
                    }
                    else{
                        escreverStatusGeral(String.format("A conexão de %s foi desativada", vertice_now.getNomeCidade().toUpperCase()));
                    }
                } catch (Exception ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            else if(permitirRemocaoPontos){
                try {
                    appBanco.excluirCidade(vertice_now);
                    escreverStatusGeral(String.format("A cidade %s foi removida", vertice_now.getNomeCidade().toUpperCase()));
                } catch (Exception ex) {
                    Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex);
                }
                recarregarMapa();
            }else{
                escreverStatusGeral(name);
            }
        }
        
        public javax.swing.JPanel getPainelPrincipal(){
            return this.princ;
        }
        
        public int getX(){
            return this.coordinates_x;
        }
        
        public int getY(){
            return this.coordinates_y;
        }
        
        public String getName(){
            return this.name;
        }
        
        public int getId(){
            return this.id_cidade;
        }
        
    }
    
class Lines{
    private Aresta aresta = null;
    private final java.awt.Color cor_ativada = java.awt.Color.BLUE;
    private final java.awt.Color cor_desativada = java.awt.Color.RED;
    private final java.awt.Color cor_caminho_minimo = java.awt.Color.GREEN;
    Line2D.Float line = null;
    
    Lines (Aresta aresta){
        this.aresta = aresta;
        desenharLinha();
    }
    
    private void desenharLinha(){
        if(this.aresta.getArestaDisponivel()){
            ((Graphics2D)graficoUniversal).setColor(cor_ativada);
        }else{
            ((Graphics2D)graficoUniversal).setColor(cor_desativada);
        }
        ((Graphics2D)graficoUniversal).setStroke(new BasicStroke(2));
        this.line = new Line2D.Float(aresta.getOrigem().getCordenadaX(), aresta.getOrigem().getCordenadaY(), aresta.getDestino().getCordenadaX(), aresta.getDestino().getCordenadaY());
        ((Graphics2D)graficoUniversal).draw(this.line);
    }
    
    public Aresta getAresta(){
        return this.aresta;
    }
    
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem AddEnlaces;
    private javax.swing.JMenuItem AddPontos;
    private javax.swing.JButton AdicionarEnlaceButton;
    private javax.swing.JPanel AdicionarEnlaces;
    private javax.swing.JPanel AdicionarPontos;
    private javax.swing.JButton AdicionarPontosButton;
    private javax.swing.JMenuItem AplicarCusto;
    private javax.swing.JMenuItem AplicarDistancia;
    private javax.swing.JMenuItem AplicarHops;
    private javax.swing.JLabel BackgroundMap;
    private javax.swing.JButton ButtonCancel;
    private javax.swing.JButton ButtonCancel1;
    private javax.swing.JMenu CaminhoMinimo;
    private javax.swing.JLabel CidadeCity1;
    private javax.swing.JLabel CidadeCity2;
    private javax.swing.JComboBox<String> ComboCitys;
    private javax.swing.JLabel CuatoLabel;
    private javax.swing.JTextField Custo;
    private javax.swing.JTextField Distancia;
    private javax.swing.JLabel DistanciaLabel;
    private javax.swing.JMenu EnlacesMenu;
    private javax.swing.JMenuItem ErroEnlace;
    private javax.swing.JMenuItem ErroPonto;
    private javax.swing.JFormattedTextField Hops;
    private javax.swing.JLabel HopsLabel;
    private javax.swing.JScrollPane JScrollMap;
    private javax.swing.JButton Listar;
    private javax.swing.JLabel Map;
    private javax.swing.JPanel PanelMap;
    private javax.swing.JMenu PontosMenu;
    private javax.swing.JMenuItem RemoveEnlaces;
    private javax.swing.JMenuItem RemovePontos;
    private javax.swing.JMenu ReportErro;
    private javax.swing.JTextField SiglaAdd;
    private javax.swing.JLabel SiglaCity1;
    private javax.swing.JLabel SiglaCity2;
    private javax.swing.JMenu SobreMenu;
    private javax.swing.JLabel StatusGeral;
    private javax.swing.JMenuBar SuperiorMenu;
    private javax.swing.JInternalFrame SuperiorMenuFrame;
    private javax.swing.JPanel TitleBar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
